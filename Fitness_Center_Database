from flask import Flask, request, jsonify
from flask_marshmallow import Marshmallow
import mysql.connector
from mysql.connector import Error


# I was having some trouble uploading this file to github, if it is messed up I will fix based on feedback and resubmit

app = Flask(__name__)

ma = Marshmallow(app)

def connect_db():
    db_name = "gymmanagement"
    user = "root"
    password = ""
    host = "localhost"

    try: 
        conn = mysql.connector.connect(
            database = db_name,
            user = user,
            password = password,
            host = host
        )
        if conn.is_connected:
            print("Connected to MySQL database successfully")
    except Error as e:
        print(f"Error: {e}")
        return None
    

class Member(ma.Schema):
    class Meta:
        fields = ('id', 'name', 'email')

member_schema = Member()
members_schema = Member(many = True)

class WorkoutSession(ma.Schema):
    class Meta:
        fields = ('id', 'member_id', 'session_date', 'duration')

workout_session_schema = WorkoutSession()
workout_sessions_schema = WorkoutSession(many=True)


@app.route('/members', methods=['POST'])
def add_member():
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')

    if not name or not email:
        return jsonify({"error": "Name and email are required"}), 400

    conn = connect_db()
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO Members (name, email) VALUES (%s, %s)")
        conn.commit()
        new_member_id = cursor.lastrowid
        new_member = {'id': new_member_id, 'name': name, 'email': email}
        return member_schema.jsonify(new_member), 201
    
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500

    finally:
        cursor.close()
        conn.close()


@app.route('/members/<int:id>', methods=['GET'])
def get_member(id):
    conn = connect_db()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("SELECT * FROM Members WHERE id = %s", (id,))
        member = cursor.fetchone()
        if not member:
            return jsonify({"error": "Member not found"}), 404
        return jsonify(member)
    
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    
    finally:
        cursor.close()
        conn.close()

@app.route('/members/<int:id>', methods=['PUT'])
def update_member(id):
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')

    if not name or not email:
        return jsonify({"error": "Name or email is required"}), 400

    conn = connect_db()
    cursor = conn.cursor()

    try:
        update_fields = []
        params = []
        
        if name:
            update_fields.append("name = %s")
            params.append(name)
        if email:
            update_fields.append("email = %s")
            params.append(email)
        
        params.append(id)
        query = f"UPDATE Members SET {', '.join(update_fields)} WHERE id = %s"
        cursor.execute(query, tuple(params))
        conn.commit()
        
        if cursor.rowcount == 0:
            return jsonify({"error": "Member not found"}), 404

        return jsonify({"message": "Member updated successfully"})
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/members/<int:id>',  methods=['DELETE'])
def delete_member(id):
    conn = connect_db()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM Members WHERE id = %s", (id,))
        conn.commit()

        if cursor.rowcount == 0:
            return jsonify({"error": "Member not found"}), 404
        return jsonify({"message": "Member deleted successfully."})
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    finally:
        cursor.close()
        conn.close()

@app.route('/workout_sessions', methods=['POST'])
def schedule_workout_session():
    data = request.get_json()
    member_id = data.get("member_id")
    session_date = data.get("session date")
    duration_minutes = data.get("duration")

    if not member_id or not session_date or not duration_minutes:
        return jsonify({"error": "Member ID, session date and duration are required"})
    
    conn = connect_db()
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO WorkoutSessions (member_id, session_date, duration) VALUES (%s, %s, %s)", (member_id, session_date, duration_minutes))
        conn.commit()
        new_session_id = cursor.lastrowid
        new_session = {'id': new_session_id, 'member_id': member_id, 'session_date': session_date, 'duration': duration_minutes}
        return workout_session_schema.jsonify(new_session)
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    finally:
        cursor.close()
        conn.close()


@app.route('/workout_sessions/<int:id>', methods=['GET'])
def get_workout_session(id):

    conn = connect_db()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("SELECT * FROM WorkoutSessions WHERE id = %s", (id,))
        session = cursor.fetchone()
        if not session:
            return jsonify({"error": "Session not found"}), 404
        return jsonify(session)
    
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    
    finally:
        cursor.close()
        conn.close()



@app.route('/workout_sessions/<int:id>', methods=['PUT'])
def update_workout_session(id):
    data = request.get_json()
    session_date = data.get('session_date')
    duration_minutes = data.get('duration')

    if not session_date and not duration_minutes:
        return jsonify({"error": "Sessions date or duration is required"}), 400
    
    conn = connect_db()
    cursor = conn.cursor()

    try: 
        update_fields = []
        params = []

        if session_date:
            update_fields.append("session_date = %s")
            params.append(session_date)
        if duration_minutes:
            update_fields.append("duration = %s")
            params.append(duration_minutes)

        params.append(id)
        query = f"UPDATE WorkoutSessions SET {', '.join(update_fields)} WHERE id = %s"
        cursor.execute(query, tuple(params))
        conn.commit()

        if cursor.rowcount == 0:
            return jsonify({"error": "Session not found"}), 404
        return jsonify({"message": "Workout session updated successfully"}), 200
    
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    
    finally: 
        cursor.close()
        conn.close()


@app.route('/workout_session/<int:id>', methods=['DELETE'])
def delete_workout(id):
    conn = connect_db()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM WorkoutSessions WHERE id = %s", (id,))
        conn.commit()

        if cursor.rowcount == 0:
            return jsonify({"error": "Session not found"})
        return jsonify({"message": "Workout session deleted successfully"})
    
    except Error as e:
        print(f"Error: {e}")
        return jsonify({"error": "Database error occurred"}), 500
    
    finally:
        cursor.close()
        conn.close()


